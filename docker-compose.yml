
services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    ports:
    - "2181:2181"
    restart: always
    # networks:
    #   - heritage-net
  # Kafka usa Zookeeper per gestire broker e coordinare i cluster.

  kafka:
  #  broker 1 
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: always
    # networks:
    #   - heritage-net

  
  kafka2:
      image: confluentinc/cp-kafka:7.5.3
      container_name: kafka2
      hostname: kafka2
      depends_on:
        - zookeeper
      environment:
        KAFKA_BROKER_ID: 2
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
        KAFKA_DEFAULT_REPLICATION_FACTOR: 3
        KAFKA_MIN_INSYNC_REPLICAS: 2
      ports:
        - "9093:9093"
      restart: always
      # networks:
      # - heritage-net
      volumes:
      - kafka2-data:/var/lib/kafka/data

  kafka3:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka3
    hostname: kafka3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    ports:
      - "9094:9094"
    # networks:
    #   - heritage-net
    restart: always
    volumes:
      - kafka3-data:/var/lib/kafka/data
 
  kafka-client:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-client
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c", "while true; do sleep 3600; done"]
    # networks:
    #   - heritage-net
  #  Non serve nessuna porta esposta: serve solo per comandi da terminale
  #  container kafka-client per poter usare i comandi Kafka CLI come kafka-topics.sh

  kafka-tools:
    image: bitnami/kafka:latest
    container_name: kafka-tools
    entrypoint: ["sleep", "infinity"]
    depends_on:
      - kafka
    # networks:
    #   - heritage-net
  # Un container leggero per interagire con Kafka da linea di comando

  kafka-init:
    container_name: kafka-init
    image: bitnami/kafka:latest
    depends_on:
      - kafka
      - kafka2
      - kafka3
    volumes:
      - ./config/kafka:/config/kafka
    entrypoint: ["/bin/bash", "/config/kafka/create_kafka_topics.sh"]
    
    # networks:
    #   - heritage-net
  # Questo container esegue uno script per creare i topic iniziali in Kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    # networks:
    #   - heritage-net
  # GUI (interfaccia grafica web)  per monitorare topic, consumer group, messaggi, ecc
  # Vai su http://localhost:8081 per usare la GUI.

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    # networks:
    #   - heritage-net

  minio-init:
    container_name: minio-init
    build: ./config/minio
    depends_on:
      - minio
    # networks:
    #   - heritage-net

  spark-master:
    container_name: spark-master
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    # 7077	usata dai worker e dai spark-submit per comunicare col master
    # 8080	usata dal browser per vedere la Spark Web UI (monitoraggio job, workers, ecc.)
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-output:/opt/bitnami/spark/output
      - ./spark-logs:/opt/bitnami/spark/logs
      - ./config/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./config/spark/jars:/opt/spark/jars
    build: ./docker/spark       # <--- cambia da image: a build
    # networks:
    #   - heritage-net

  spark-worker:
    container_name: spark-worker
    image: bitnami/spark:latest
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-output:/opt/bitnami/spark/output
      - ./spark-logs:/opt/bitnami/spark/logs
      - ./config/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./jars:/opt/spark/jars
    build: ./docker/spark
    # networks:
    #   - heritage-net   
    
  

  spark-consumer-europeana:
    container_name: spark-consumer-europeana
    build: ./spark-consumer-europeana
    depends_on:
      - spark-master
      - kafka
      - minio
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./config/spark/jars:/opt/spark/jars
      - ./config/spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf 
    restart: always
    # networks:
    #   - heritage-net

  # simulate-user-annotations:
  #   build:
  #     context: ./simulate-user-annotations
  #   depends_on:
  #     - kafka
  #   restart: always

  europeana-scraper:
    container_name: europeana-scraper
    build: ./europeana-scraper
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - kafka-init
    restart: always
    volumes:
      - ./europeana-scraper/state:/app/state
    # networks:
    #  - heritage-net

# networks:
#   heritage-net:
#     driver: bridge

volumes:
  pgdata:
  redis-data:
  minio-data:
  zookeeper-data:
  kafka-data:
  kafka2-data:
  kafka3-data:
  europeana-offset:




# per il futuro:

  # streamlit:
  #   container_name: streamlit
  #   build: ./streamlit
  #   ports:
  #     - "8501:8501"
  #   volumes:
  #     - ./streamlit/app:/app
  #   depends_on:
  #     - redis
  #     - postgres
  #     - minio
  #     - spark-master

  # redis:
  #   container_name: redis
  #   image: redis:7
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
  #     - redis-data:/data 
  #   command: redis-server /usr/local/etc/redis/redis.conf

  # postgres:
  #   container_name: postgres
  #   image: postgres:14
  #   environment:
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: pass
  #     POSTGRES_DB: heritage
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #     - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql




  # non serve piu 
  # mqtt-kafka-bridge:
  #   container_name: mqtt-kafka-bridge
  #   build: ./mqtt-kafka-bridge
  #   depends_on:
  #     - mqtt
  #     - kafka
  #   restart: always

  # mqtt:
  #   container_name: mqtt
  #   image: eclipse-mosquitto
  #   ports:
  #     - "1883:1883"
  #     - "9091:9001"
  #   volumes:
  #     - ./config/mqtt:/mosquitto/config
