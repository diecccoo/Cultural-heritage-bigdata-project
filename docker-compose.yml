services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      # - zookeeper-data:/bitnami/zookeeper
    ports:
    - "2181:2181"
    restart: always
    networks:
      - heritage-net
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.0' # 1 CPU core
    #       memory: 1G  # 1 Gigabyte di RAM
  # Kafka usa Zookeeper per gestire broker e coordinare i cluster.

  kafka:
  #  broker 1 
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    restart: always
    networks:
      - heritage-net

    

  
  # kafka2:
  #   image: confluentinc/cp-kafka:7.6.0
  #   container_name: kafka2
  #   hostname: kafka2
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
  #   ports:
  #     - "9093:9093"
  #   restart: always
  #   networks:
  #   - heritage-net
  #   volumes:
  #     - kafka2-data:/var/lib/kafka/data
  #     - ./config/kafka/server-2.properties:/etc/kafka/server.properties

  # kafka3:
  #   image: confluentinc/cp-kafka:7.5.3
  #   container_name: kafka3
  #   hostname: kafka3
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
  #   ports:
  #     - "9094:9094"
  #   networks:
  #     - heritage-net
  #   restart: always
  #   volumes:
  #     - kafka3-data:/var/lib/kafka/data
  #     - ./config/kafka/server-3.properties:/etc/kafka/server.properties
 
  # kafka-client:
  #   image: confluentinc/cp-kafka:7.5.3
  #   container_name: kafka-client
  #   depends_on:
  #     - kafka
  #   entrypoint: ["/bin/sh", "-c", "while true; do sleep 3600; done"]
  #   networks:
  #     - heritage-net
  #  Non serve nessuna porta esposta: serve solo per comandi da terminale
  #  container kafka-client per poter usare i comandi Kafka CLI come kafka-topics.sh

  # kafka-tools:
  #   image: bitnami/kafka:latest
  #   container_name: kafka-tools
  #   entrypoint: ["sleep", "infinity"]
  #   depends_on:
  #     - kafka
  #   networks:
  #     - heritage-net
  # Un container leggero per interagire con Kafka da linea di comando

  kafka-init:
    container_name: kafka-init
    image: bitnami/kafka:latest
    depends_on:
      - kafka
      - kafka-ui
    volumes:
      - ./config/kafka:/config/kafka
    entrypoint: 
      - /bin/bash
      - -c
      - |
        cp /config/kafka/create_kafka_topics.sh /tmp/create_kafka_topics.sh
        sed -i 's/\r$//' /tmp/create_kafka_topics.sh
        chmod +x /tmp/create_kafka_topics.sh
        exec /tmp/create_kafka_topics.sh
    networks:
      - heritage-net
  # Questo container esegue uno script per creare i topic iniziali in Kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    depends_on:
      - kafka
      # - kafka2
      # - kafka3
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092 #,kafka2:9093 #,kafka3:9094 <--- con kafka3
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - heritage-net
  # GUI (interfaccia grafica web)  per monitorare topic, consumer group, messaggi, ecc
  # Vai su http://localhost:8081 per usare la GUI.

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    networks:
      - heritage-net

  minio-init:
    container_name: minio-init
    build: ./config/minio
    depends_on:
      - minio
    networks:
      - heritage-net

  spark-master:
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      # - "7077:7077"
      - "8080:8080"
    image: bitnami/spark:latest
    networks:
      - heritage-net
#  7077	usata dai worker e dai spark-submit per comunicare col master
#  8080	usata dal browser per vedere la Spark Web UI (monitoraggio job, workers, ecc.)
    

  spark-worker:
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    image: bitnami/spark:latest
    networks:
      - heritage-net   


  europeana-scraper:
    container_name: europeana-scraper
    build: ./europeana-scraper
    depends_on:
      - kafka
    restart: always
    volumes:
      - ./europeana-scraper/state:/app/state
    networks:
     - heritage-net


  eu-to-raw:
        build:
          context: .
          dockerfile: ./spark-apps/eu-to-raw/Dockerfile
        container_name: eu-to-raw
        depends_on:
          - kafka
          - spark-master
        networks:
          - heritage-net

  eu-to-cleansed:
    build:
          context: .
          dockerfile: ./spark-apps/eu-to-cleansed/Dockerfile
    container_name: eu-to-cleansed
    restart: always
    depends_on:
      - kafka
      - minio
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
    networks:
      - heritage-net

  annotation-producer:
    container_name: annotation-producer
    build:
          context: .
          dockerfile: ./annotation-producer/Dockerfile
    depends_on:
      - kafka
      - minio
    restart: always
    environment: 
      AWS_ACCESS_KEY_ID:     minio
      AWS_SECRET_ACCESS_KEY: minio123
      S3A_ENDPOINT:          http://minio:9000
      KAFKA_BROKER:          kafka:9092
    networks:
      - heritage-net

  ugc-to-raw:
    build:
      context: .
      dockerfile: ./spark-apps/ugc-to-raw/Dockerfile 
    container_name: ugc-to-raw
    restart: always
    depends_on:
      - kafka
      - minio
      - spark-master
    networks:
      - heritage-net
  
  
  ugc-to-cleansed:   
    build:
      context: .
      dockerfile: ./spark-apps/ugc-to-cleansed/Dockerfile
    container_name: ugc-to-cleansed
    depends_on:
      - spark-master
      - minio
    restart: always
    networks:
      - heritage-net


  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: heritage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - heritage-net


  eu-to-postgres:
   #spark job
    build:
      context: ./spark-apps/eu-to-postgres
    command: >
      spark-submit /app/delta_to_postgres.py
    depends_on:
      - postgres
      - minio
      - spark-master
    networks:
      - heritage-net
 
  ugc-to-postgres:
    build:
      context: ./spark-apps/ugc-to-postgres
    command: >
      spark-submit /app/ugc_to_postgres.py
    depends_on:
      - postgres
      - minio
      - spark-master
    networks:
      - heritage-net


networks:
  heritage-net:
    driver: bridge

volumes:
  minio-data:
  zookeeper-data:
  kafka-data:
  # kafka2-data:
  spark-eutm:
  # kafka3-data:
  postgres-data:




# per il futuro:

  # streamlit:
  #   container_name: streamlit
  #   build: ./streamlit
  #   ports:
  #     - "8501:8501"
  #   volumes:
  #     - ./streamlit/app:/app
  #   depends_on:
  #     - redis
  #     - postgres
  #     - minio
  #     - spark-master

  # redis:
  #   container_name: redis
  #   image: redis:7
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
  #     - redis-data:/data 
  #   command: redis-server /usr/local/etc/redis/redis.conf

  # postgres:
  #   container_name: postgres
  #   image: postgres:14
  #   environment:
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: pass
  #     POSTGRES_DB: heritage
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #     - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql




  # non serve piu 
  # mqtt-kafka-bridge:
  #   container_name: mqtt-kafka-bridge
  #   build: ./mqtt-kafka-bridge
  #   depends_on:
  #     - mqtt
  #     - kafka
  #   restart: always

  # mqtt:
  #   container_name: mqtt
  #   image: eclipse-mosquitto
  #   ports:
  #     - "1883:1883"
  #     - "9091:9001"
  #   volumes:
  #     - ./config/mqtt:/mosquitto/config
