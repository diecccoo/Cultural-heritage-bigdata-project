services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    ports:
    - "2181:2181"
    restart: always
    networks:
      - heritage-net


  kafka:
  #  broker 1 
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    restart: always
    networks:
      - heritage-net


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092 
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - heritage-net


  kafka-init:
    container_name: kafka-init
    image: bitnami/kafka:latest
    depends_on:
      - kafka
      - kafka-ui
    volumes:
      - ./config/kafka:/config/kafka
    entrypoint: 
      - /bin/bash
      - -c
      - |
        cp /config/kafka/create_kafka_topics.sh /tmp/create_kafka_topics.sh
        sed -i 's/\r$//' /tmp/create_kafka_topics.sh
        chmod +x /tmp/create_kafka_topics.sh
        exec /tmp/create_kafka_topics.sh
    networks:
      - heritage-net
  # Questo container esegue uno script per creare i topic iniziali in Kafka


  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    networks:
      - heritage-net


  minio-init:
    container_name: minio-init
    build: ./config/minio
    depends_on:
      - minio
    networks:
      - heritage-net
      

  spark-master:
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      # - "7077:7077"
      - "8080:8080"
    image: bitnami/spark:latest
    networks:
      - heritage-net


  eu-to-raw:
    build:
      context: .
      dockerfile: ./spark-apps/eu-to-raw/Dockerfile
    container_name: eu-to-raw
    depends_on:
      - kafka
      - spark-master
    networks:
      - heritage-net

  europeana-ingestion:
    container_name: europeana-ingestion
    build: ./kafka-producers/europeana-ingestion
    depends_on:
      - kafka
      - eu-to-raw
    restart: always
    volumes:
      - ./kafka-producers/europeana-ingestion/state:/app/state
    networks:
     - heritage-net


  eu-to-cleansed:
    build:
          context: .
          dockerfile: ./spark-apps/eu-to-cleansed/Dockerfile
    container_name: eu-to-cleansed
    restart: always
    depends_on:
      - kafka
      - minio
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
    networks:
      - heritage-net

  
  ugc-to-raw:
    build:
      context: .
      dockerfile: ./spark-apps/ugc-to-raw/Dockerfile 
    container_name: ugc-to-raw
    restart: always
    depends_on:
      - kafka
      - minio
      - spark-master
    networks:
      - heritage-net

  annotation-producer:
    container_name: annotation-producer
    build:
          context: .
          dockerfile: ./kafka-producers/annotation-producer/Dockerfile
    depends_on:
      - ugc-to-raw
      - kafka
      - minio
    restart: always
    environment: 
      AWS_ACCESS_KEY_ID:     minio
      AWS_SECRET_ACCESS_KEY: minio123
      S3A_ENDPOINT:          http://minio:9000
      KAFKA_BROKER:          kafka:9092
    networks:
      - heritage-net
  
  ugc-to-cleansed:   
    build:
      context: .
      dockerfile: ./spark-apps/ugc-to-cleansed/Dockerfile
    container_name: ugc-to-cleansed
    depends_on:
      - spark-master
      - minio
    restart: always
    networks:
      - heritage-net

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - heritage-net

  embeddings-extractor:
    build:
      context: .
      dockerfile: ./ML-model/embeddings-extractor/Dockerfile
    container_name: embeddings-extractor
    restart: always
    depends_on:
      - spark-master
      - minio
      - qdrant
    volumes:
      - hf-cache:/root/.cache/huggingface/transformers
    networks:
      - heritage-net


  qdrant-deduplicator:
    build:
      context: .
      dockerfile: ./ML-model/qdrant-deduplicator/Dockerfile
    container_name: qdrant-deduplicator
    restart: always
    depends_on:
      - qdrant
    networks:
      - heritage-net

  join-eu-ugc-qdrant-to-curated:
    build:
      context: .
      dockerfile: ./spark-apps/join-eu-ugc-qdrant-to-curated/Dockerfile
    container_name: join-eu-ugc-qdrant-to-curated
    restart: always
    depends_on:
      - spark-master
      - minio
      - qdrant
    networks:
      - heritage-net

  # embeddings-exporter:
  #   build:
  #     context: .
  #     dockerfile: ./spark-apps/embeddings-exporter/Dockerfile
  #   container_name: embeddings-exporter
  #   depends_on:
  #     - spark-master
  #     - minio
  #   networks:
  #     - heritage-net
  #   volumes:
  #     - deduplication-data:/shared-data

  # faiss:
  #   build:
  #     context: .
  #     dockerfile: ./faiss/Dockerfile
  #   container_name: faiss
  #   depends_on:
  #     - embeddings-exporter
  #   networks:
  #     - heritage-net
  #   volumes:
  # #     - deduplication-data:/shared-data


  # deduplicator-to-cleansed:
  #   build:
  #     context: .
  #     dockerfile: ./spark-apps/deduplicator-to-cleansed/Dockerfile
  #   container_name: deduplicator-to-cleansed
  #   depends_on:
  #     - spark-master
  #     - minio
  #   networks:
  #     - heritage-net
  #   volumes:
  #     - deduplication-data:/shared-data


  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: heritage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - heritage-net


  pgadmin:
    image: dpage/pgadmin4:8.5
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@heritage.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - heritage-net

 
  curated-to-postgres:
    build:
      context: .
      dockerfile: ./spark-apps/curated-to-postgres/Dockerfile
    container_name: curated-to-postgres
    restart: always
    depends_on:
      - postgres
      - minio
      - spark-master
    networks:
      - heritage-net

  streamlit:
    build: ./streamlit/app
    container_name: streamlit
    ports:
      - "8501:8501"
    depends_on:
      - postgres
      - qdrant
    networks:
      - heritage-net
    environment:
      - PYTHONPATH=/app
    restart: unless-stopped
    volumes:
      - ./streamlit/app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  heritage-net:
    driver: bridge


volumes:
  minio-data:
  zookeeper-data:
  kafka-data:
  spark-eutm:
  postgres-data:
  pgadmin-data:
  # deduplication-data:
  hf-cache:
  qdrant-data: